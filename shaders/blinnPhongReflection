#version 150

struct LightSource{
  //position in view space
  vec4 position;
  // ambient color
  vec4 ambient;
  // diffuse color
  vec4 diffuse;
  // specular color
  vec4 specular;
};

struct Material{
  // ambient color
  vec4 ambient;
  // diffuse color
  vec4 diffuse;
  // specular color
  vec4 specular;
  // shininess
  float shininess;
};

uniform LightSource lightSource;
uniform Material material;

vec4 blinnPhongReflection(vec4 position, vec3 normal){
	vec4 ambient = lightSource.ambient * material.ambient;
	
	vec3 lightDirection = normalize(lightSource.position.xyz - position.xyz);
	vec4 diffuse = lightSource.diffuse * material.diffuse * 
		max(0.0, dot(lightDirection, normal)); // angle
	
	vec4 specular;
	float specularI;
	if(dot(lightDirection, normal) > 0) {
		vec3 H = normalize(lightDirection - position.xyz);
		float angle = max(dot(H, normal), 0.0);

		specularI = pow(angle, material.shininess);
	}
	
	specular = lightSource.specular * material.specular * specularI;
	
	return ambient + diffuse + specular;
}
	
